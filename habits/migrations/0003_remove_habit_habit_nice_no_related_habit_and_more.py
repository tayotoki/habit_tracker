# Generated by Django 4.2 on 2024-03-20 09:56

import datetime
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("habits", "0002_alter_action_description"),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name="habit",
            name="habit_nice_no_related_habit",
        ),
        migrations.RemoveConstraint(
            model_name="habit",
            name="habit_no_related_habit_and_reward_together",
        ),
        migrations.AlterField(
            model_name="action",
            name="description",
            field=models.TextField(
                blank=True,
                help_text="Можно оставить пустым",
                null=True,
                verbose_name="Описание действия",
            ),
        ),
        migrations.AlterField(
            model_name="habit",
            name="periodicity",
            field=models.PositiveSmallIntegerField(
                default=1,
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(7),
                ],
                verbose_name="Периодичность",
            ),
        ),
        migrations.AlterField(
            model_name="habit",
            name="time",
            field=models.DurationField(
                default=datetime.timedelta(0),
                validators=[
                    django.core.validators.MaxValueValidator(
                        datetime.timedelta(seconds=120)
                    )
                ],
                verbose_name="Время на выполнение",
            ),
        ),
        migrations.AddConstraint(
            model_name="habit",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("is_nice", True), ("related_habit__isnull", True)),
                    ("is_nice", False),
                    _connector="OR",
                ),
                name="habit_nice_no_related_habit",
                violation_error_message="У приятной привычки не может быть связанной еще одной приятной привычки",
            ),
        ),
        migrations.AddConstraint(
            model_name="habit",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("related_habit__isnull", False),
                    ("reward__isnull", False),
                    _negated=True,
                ),
                name="habit_no_related_habit_and_reward_together",
                violation_error_message="В качестве награды может быть что-то одно: приятная привычка или награда",
            ),
        ),
    ]
